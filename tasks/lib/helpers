exports.init = function(grunt, _) {

  var exports = {};
  var path = require('path');
  var fs = require('fs');
  var clc = require('cli-color');
  grunt.util = grunt.utils || grunt.util;

  function copyFiles(config, name, source) {
    var targetDest;

    if(isFolder(source)) {
      grunt.file.recurse(source, function(abspath, rootdir, subdir, filename) {
        var pathToFile = (subdir) ? source+ subdir + '/' + filename : source + filename;
        
        if(targetDest = isSpecific(config, filename)) {
          console.log('specific source found for ' + filename + '\n');
          copy(pathToFile, targetDest + '/' + path.basename(filename));

        } else {
          var extension = filename.split('.').pop();
          var targetFolder = config.mapping[extension] || extension;
          targetFolder = (config.options && config.options.includeName) ? targetFolder + '/' + name : targetFolder;
          copy(pathToFile, targetFolder + '/' + path.basename(filename));
        }
        
      })
      return;
    }

    if(targetDest = isSpecific(config, path.basename(source))) {
      console.log('specific source found for ' + source + '\n');
      copy(source, targetDest + '/' + path.basename(source));
    } else {
      var extension = source.split('.').pop();
      var targetFolder = config.mapping[extension] || extension;
      targetFolder = (config.options && config.options.includeName) ? targetFolder + '/' + name : targetFolder;
      copy(source, targetFolder + '/' + path.basename(source));
    }
    
  }

  function isFolder(path) {
    var lastChar = path.charAt(path.length - 1);
    if(lastChar === '/' || lastChar === '\\') {
      return true;
    }

    return false;
  }

  function isSpecific(config, fileName) {
    var ret = false;
    if(!config.specifics) return;
    _.each(config.specifics, function(specific) {
      _.each(specific, function(targetDest, targetFile) {
        if(fileName === targetFile) {
          ret = targetDest;
          return;
        }
      });
    });
    
    return ret;
  }

  function copy(source, target) {
    if(fs.existsSync(target)) {
      grunt.log.write(clc.green('>>> File already exists ' + target + ' skipping\n'));
      return;
    }
    grunt.file.copy(source, target);
  }

  exports.parse = function(config, name, main) {
    if(typeof(main) === undefined) {
      grunt.log.write('no main found for ' + name + 'skipping \n');
    }
    if(grunt.util.kindOf(main) === 'array') {
      _.each(main, function(source) {
        copyFiles(config, name, source);
      });
    } else {
      copyFiles(config, name, main);
    }
  }

  return exports;
};

